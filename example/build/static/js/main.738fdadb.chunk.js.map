{"version":3,"sources":["useSwipeToDismiss.js","App.js","index.js"],"names":["useSwipeToDismiss","ref","onDismiss","removeDOM","distanceBeforeDismiss","direction","node","current","_useState","useState","_useState2","Object","slicedToArray","removing","setRemoving","_useState3","_useState4","pressedPosition","setPressedPosition","_useState5","_useState6","positionLeft","setPositionLeft","_useState7","_useState8","animate","setAnimate","_useState9","_useState10","opacity","setOpacity","remove","useCallback","setTimeout","onMouseUp","onMouseMove","event","newPositionLeft","screenX","directionValue","offsetWidth","useEffect","document","body","addEventListener","removeEventListener","style","transform","concat","transition","onMouseDown","MessageItem","_ref","message","useRef","restProps","react_default","a","createElement","assign","className","App","messages","setMessages","map","it","index","App_MessageItem","key","btoa","indexToRemove","newMessages","filter","handleDismiss","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.738fdadb.chunk.js","sourcesContent":["import {useCallback, useEffect, useState} from 'react';\n\nconst useSwipeToDismiss = (ref, onDismiss, removeDOM, distanceBeforeDismiss, direction) => {\n  const node = ref.current;\n\n  const [removing, setRemoving] = useState(false);\n  const [pressedPosition, setPressedPosition] = useState(false);\n  const [positionLeft, setPositionLeft] = useState(false);\n  const [animate, setAnimate] = useState(false);\n  const [opacity, setOpacity] = useState(1);\n\n  const remove = useCallback(() => {\n    setTimeout(() => {\n      if (removeDOM) {\n        node.remove();\n      }\n      onDismiss();\n    }, 300);\n  }, [removeDOM, node, onDismiss]);\n\n  const onMouseUp = useCallback(() => {\n    if (!removing) {\n      setPressedPosition(false);\n      setPositionLeft(0);\n      setAnimate(true);\n      setOpacity(1);\n    }\n  }, [removing]);\n\n  const onMouseMove = useCallback((event) => {\n    if (removing) return;\n\n    if (pressedPosition) {\n      let newPositionLeft = event.screenX - pressedPosition;\n      const directionValue = direction === 'right' ? 1 : -1;\n\n      if ((direction === 'right' && newPositionLeft >= (node.offsetWidth * distanceBeforeDismiss / 100)) || (direction === 'left' && newPositionLeft * directionValue >= (node.offsetWidth * distanceBeforeDismiss / 100))) {\n        newPositionLeft = newPositionLeft + node.offsetWidth * directionValue;\n        setAnimate(true);\n        setRemoving(true);\n        setTimeout(() => {\n          remove();\n        }, 500);\n      }\n      else {\n        if (direction === 'right') {\n          newPositionLeft = newPositionLeft < 0 ? 0 : newPositionLeft;\n        } else {\n          newPositionLeft = newPositionLeft > 0 ? 0 : newPositionLeft;\n        }\n      }\n\n      setPositionLeft(newPositionLeft);\n      setOpacity((100 - (newPositionLeft * directionValue * 100 / (node.offsetWidth * 2))) / 100);\n    }\n  }, [removing, pressedPosition, direction, distanceBeforeDismiss, node, remove]);\n\n  const onMouseDown = (event) => {\n    setPressedPosition(event.screenX);\n    setAnimate(false);\n  };\n\n\n  useEffect(() => {\n    document.body.addEventListener('mouseup', onMouseUp);\n    return () => document.body.removeEventListener('mouseup', onMouseUp);\n  });\n\n  const style = {\n    transform: `translateX(${positionLeft}px)`,\n    opacity,\n  };\n\n  if (animate) {\n    style.transition = 'transform 0.3s ease, opacity 0.5s ease';\n  }\n\n  return {\n    onMouseMove,\n    onMouseDown,\n    style,\n  };\n};\n\nexport default useSwipeToDismiss;\n","import React, {useRef, useState} from 'react';\nimport './App.css';\n\nimport useSwipeToDismiss from './useSwipeToDismiss';\n\nconst MessageItem = ({message, onDismiss}) => {\n  const ref = useRef(null);\n\n  const restProps = useSwipeToDismiss(ref, onDismiss, false, 100, 'right');\n\n  return <div ref={ref} className={'Message'} {...restProps}>\n    {message}\n  </div>;\n};\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    'Your changes has been saved.',\n    'Please verify your email.',\n    'Foo',\n    'Bar',\n  ]);\n\n  const handleDismiss = (indexToRemove) => {\n    const newMessages = messages.filter((it, index) => index !== indexToRemove);\n\n    setMessages(newMessages);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={'MessageList'}>\n        {messages.map((it, index) => (\n          <MessageItem\n            key={btoa(it)}\n            message={it}\n            onDismiss={() => handleDismiss(index)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}